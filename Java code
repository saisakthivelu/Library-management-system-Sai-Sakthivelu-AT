//MYSQL CODE

-- Create database
CREATE DATABASE library_db;

-- Use the database
USE library_db;

-- Create table for books
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    quantity INT NOT NULL DEFAULT 1
);

-- Create table for borrowers
CREATE TABLE borrowers (
    borrower_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

-- Create table for transactions (issue and return)
CREATE TABLE transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    borrower_id INT,
    issue_date DATE,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (borrower_id) REFERENCES borrowers(borrower_id)
);

//JAVA CODE

import java.sql.*;
import java.util.Scanner;

public class LibraryManagementSystem {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/library_db";
    private static final String USER = "root";
    private static final String PASS = "*********"; //enter your mysql password

    private static Connection connect() throws SQLException {
        return DriverManager.getConnection(DB_URL, USER, PASS);
    }

    public static void addBook(String title, String author, int quantity) {
        String query = "INSERT INTO books (title, author, quantity) VALUES (?, ?, ?)";
        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, title);
            pstmt.setString(2, author);
            pstmt.setInt(3, quantity);
            pstmt.executeUpdate();
            System.out.println("Book added successfully with " + quantity + " copies.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void addBorrower(String name, String email) {
        String query = "INSERT INTO borrowers (name, email) VALUES (?, ?)";
        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setString(2, email);
            pstmt.executeUpdate();
            System.out.println("Borrower added successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void showAvailableBooks() {
        String query = "SELECT book_id, title, author, quantity FROM books WHERE quantity > 0";
        try (Connection conn = connect(); PreparedStatement pstmt = conn.prepareStatement(query)) {
            ResultSet rs = pstmt.executeQuery();

            System.out.println("\nAvailable Books:");
            System.out.println("ID\tTitle\tAuthor\tQuantity");
            while (rs.next()) {
                int bookId = rs.getInt("book_id");
                String title = rs.getString("title");
                String author = rs.getString("author");
                int quantity = rs.getInt("quantity");
                System.out.println(bookId + "\t" + title + "\t" + author + "\t" + quantity);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void issueBook(int borrowerId) {
        // Display all available books
        showAvailableBooks();

        Scanner sc = new Scanner(System.in);
        System.out.print("Enter book ID to issue: ");
        int bookId = sc.nextInt();

        String checkAvailability = "SELECT quantity FROM books WHERE book_id = ?";
        String issueTransaction = "INSERT INTO transactions (book_id, borrower_id, issue_date) VALUES (?, ?, CURDATE())";
        String updateBookQuantity = "UPDATE books SET quantity = quantity - 1 WHERE book_id = ? AND quantity > 0";

        try (Connection conn = connect();
             PreparedStatement checkStmt = conn.prepareStatement(checkAvailability);
             PreparedStatement issueStmt = conn.prepareStatement(issueTransaction);
             PreparedStatement updateStmt = conn.prepareStatement(updateBookQuantity)) {

            // Check if the book has available copies
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();
            if (rs.next() && rs.getInt("quantity") > 0) {
                // Issue the book
                issueStmt.setInt(1, bookId);
                issueStmt.setInt(2, borrowerId);
                issueStmt.executeUpdate();

                // Update book quantity
                updateStmt.setInt(1, bookId);
                updateStmt.executeUpdate();

                System.out.println("Book issued successfully.");
            } else {
                System.out.println("No copies of the book are available.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void returnBook(int bookId) {
        String returnTransaction = "UPDATE transactions SET return_date = CURDATE() WHERE book_id = ? AND return_date IS NULL";
        String updateBookQuantity = "UPDATE books SET quantity = quantity + 1 WHERE book_id = ?";

        try (Connection conn = connect();
             PreparedStatement returnStmt = conn.prepareStatement(returnTransaction);
             PreparedStatement updateStmt = conn.prepareStatement(updateBookQuantity)) {

            // Mark the book as returned
            returnStmt.setInt(1, bookId);
            int rowsAffected = returnStmt.executeUpdate();

            if (rowsAffected > 0) {
                // Increment book quantity
                updateStmt.setInt(1, bookId);
                updateStmt.executeUpdate();
                System.out.println("Book returned successfully.");
            } else {
                System.out.println("Book was not issued or already returned.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n1. Add Book");
            System.out.println("2. Add Borrower");
            System.out.println("3. Issue Book");
            System.out.println("4. Return Book");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter book title: ");
                    String title = sc.nextLine();
                    System.out.print("Enter book author: ");
                    String author = sc.nextLine();
                    System.out.print("Enter quantity of the book: ");
                    int quantity = sc.nextInt();
                    addBook(title, author, quantity);
                    break;
                case 2:
                    System.out.print("Enter borrower name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter borrower email: ");
                    String email = sc.nextLine();
                    addBorrower(name, email);
                    break;
                case 3:
                    System.out.print("Enter borrower ID: ");
                    int borrowerId = sc.nextInt();
                    issueBook(borrowerId);
                    break;
                case 4:
                    System.out.print("Enter book ID to return: ");
                    int returnBookId = sc.nextInt();
                    returnBook(returnBookId);
                    break;
                case 5:
                    System.out.println("Exiting...");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
